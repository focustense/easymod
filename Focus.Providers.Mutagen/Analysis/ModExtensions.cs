using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using RecordType = Focus.Analysis.Records.RecordType;

namespace Focus.Providers.Mutagen.Analysis
{
    delegate IReadOnlyCache<ISkyrimMajorRecordGetter, FormKey>? TopLevelGroupGetter(ISkyrimModGetter mod);

    static class ModExtensions
    {
        private static readonly ConcurrentDictionary<RecordType, TopLevelGroupGetter?> topLevelGroupGetters = new();

        public static IReadOnlyCache<ISkyrimMajorRecordGetter, FormKey>? GetTopLevelGroupGetter(this ISkyrimModGetter mod, RecordType type)
        {
            var topLevelGroupGetter = topLevelGroupGetters.GetOrAdd(type, t =>
            {
                var groupType = type.GetGroupType();
                if (groupType == null)
                    return null;
                if (groupType == typeof(ICellGetter))
                {
                    var cellCache = new CellCache(mod.Cells);
                    return _ => cellCache;
                }
                var getTopLevelGroupMethod = typeof(IModGetter).GetMethod(nameof(IModGetter.GetTopLevelGroupGetter))!
                    .MakeGenericMethod(groupType);
                var modParam = Expression.Parameter(typeof(ISkyrimModGetter), "mod");
                return Expression
                    .Lambda<TopLevelGroupGetter>(
                        Expression.Call(modParam, getTopLevelGroupMethod!),
                        modParam)
                    .Compile();
            });
            return topLevelGroupGetter?.Invoke(mod);
        }

        public static IEnumerable<ISkyrimMajorRecordGetter> GetGroup(this ISkyrimModGetter mod, RecordType type) => type switch
        {
            RecordType.AcousticSpace => mod.AcousticSpaces,
            RecordType.Action => mod.Actions,
            RecordType.Activator => mod.Activators,
            RecordType.ActorValueInformation => mod.ActorValueInformation,
            RecordType.AddonNode => mod.AddonNodes,
            RecordType.AlchemicalApparatus => mod.AlchemicalApparatuses,
            RecordType.Ammunition => mod.Ammunitions,
            RecordType.AnimatedObject => mod.AnimatedObjects,
            RecordType.Armor => mod.Armors,
            RecordType.ArmorAddon => mod.ArmorAddons,
            RecordType.ArtObject => mod.ArtObjects,
            RecordType.AssociationType => mod.AssociationTypes,
            RecordType.BodyPartData => mod.BodyParts,
            RecordType.Book => mod.Books,
            RecordType.CameraPath => mod.CameraPaths,
            RecordType.CameraShot => mod.CameraShots,
            RecordType.Cell => mod.Cells.Records.SelectMany(x => x.SubBlocks).SelectMany(x => x.Cells),
            RecordType.Climate => mod.Climates,
            RecordType.CollisionLayer => mod.CollisionLayers,
            RecordType.Color => mod.Colors,
            RecordType.CombatStyle => mod.CombatStyles,
            RecordType.ConstructibleObject => mod.ConstructibleObjects,
            RecordType.Container => mod.Containers,
            RecordType.Debris => mod.Debris,
            RecordType.DefaultObjectManager => mod.DefaultObjectManagers,
            RecordType.DialogBranch => mod.DialogBranches,
            RecordType.DialogTopic => mod.DialogTopics,
            RecordType.DialogView => mod.DialogViews,
            RecordType.Door => mod.Doors,
            RecordType.DualCastData => mod.DualCastData,
            RecordType.EffectShader => mod.EffectShaders,
            RecordType.EncounterZone => mod.EncounterZones,
            RecordType.EquipType => mod.EquipTypes,
            RecordType.Explosion => mod.Explosions,
            RecordType.Eyes => mod.Eyes,
            RecordType.Faction => mod.Factions,
            RecordType.Flora => mod.Florae,
            RecordType.Footstep => mod.Footsteps,
            RecordType.FootstepSet => mod.FootstepSets,
            RecordType.FormIdList => mod.FormLists,
            RecordType.Furniture => mod.Furniture,
            RecordType.GameSetting => mod.GameSettings,
            RecordType.Global => mod.Globals,
            RecordType.Grass => mod.Grasses,
            RecordType.Hazard => mod.Hazards,
            RecordType.HeadPart => mod.HeadParts,
            RecordType.IdleAnimation => mod.IdleAnimations,
            RecordType.IdleMarker => mod.IdleMarkers,
            RecordType.ImageSpace => mod.ImageSpaces,
            RecordType.ImageSpaceAdapter => mod.ImageSpaceAdapters,
            RecordType.Impact => mod.Impacts,
            RecordType.ImpactDataSet => mod.ImpactDataSets,
            RecordType.Ingestible => mod.Ingestibles,
            RecordType.Ingredient => mod.Ingredients,
            RecordType.Key => mod.Keys,
            RecordType.Keyword => mod.Keywords,
            RecordType.LandscapeTexture => mod.LandscapeTextures,
            RecordType.LeveledItem => mod.LeveledItems,
            RecordType.LeveledNpc => mod.LeveledNpcs,
            RecordType.LeveledSpell => mod.LeveledSpells,
            RecordType.Light => mod.Lights,
            RecordType.LightingTemplate => mod.LightingTemplates,
            RecordType.LoadScreen => mod.LoadScreens,
            RecordType.Location => mod.Locations,
            RecordType.LocationReferenceType => mod.LocationReferenceTypes,
            RecordType.MagicEffect => mod.MagicEffects,
            RecordType.MaterialObject => mod.MaterialObjects,
            RecordType.MaterialType => mod.MaterialTypes,
            RecordType.Message => mod.Messages,
            RecordType.MiscItem => mod.MiscItems,
            RecordType.MoveableStatic => mod.MoveableStatics,
            RecordType.MovementType => mod.MovementTypes,
            RecordType.MusicTrack => mod.MusicTracks,
            RecordType.MusicType => mod.MusicTypes,
            RecordType.NavigationMeshInfoMap => mod.NavigationMeshInfoMaps,
            RecordType.Npc => mod.Npcs,
            RecordType.ObjectEffect => mod.ObjectEffects,
            RecordType.Outfit => mod.Outfits,
            RecordType.Package => mod.Packages,
            RecordType.Perk => mod.Perks,
            RecordType.Projectile => mod.Projectiles,
            RecordType.Quest => mod.Quests,
            RecordType.Race => mod.Races,
            RecordType.Region => mod.Regions,
            RecordType.Relationship => mod.Relationships,
            RecordType.ReverbParameters => mod.ReverbParameters,
            RecordType.Scene => mod.Scenes,
            RecordType.Scroll => mod.Scrolls,
            RecordType.ShaderParticleGeometry => mod.ShaderParticleGeometries,
            RecordType.Shout => mod.Shouts,
            RecordType.SoulGem => mod.SoulGems,
            RecordType.SoundCategory => mod.SoundCategories,
            RecordType.SoundDescriptor => mod.SoundDescriptors,
            RecordType.SoundMarker => mod.SoundMarkers,
            RecordType.SoundOutputModel => mod.SoundOutputModels,
            RecordType.Spell => mod.Spells,
            RecordType.Static => mod.Statics,
            RecordType.StoryManageBranchNode => mod.StoryManagerBranchNodes,
            RecordType.StoryManagerEventNode => mod.StoryManagerEventNodes,
            RecordType.StoryManagerQuestNode => mod.StoryManagerQuestNodes,
            RecordType.TalkingActivator => mod.TalkingActivators,
            RecordType.TextureSet => mod.TextureSets,
            RecordType.Tree => mod.Trees,
            RecordType.VisualEffect => mod.VisualEffects,
            RecordType.VoiceType => mod.VoiceTypes,
            RecordType.Water => mod.Waters,
            RecordType.Weapon => mod.Weapons,
            RecordType.Weather => mod.Weathers,
            RecordType.WordOfPower => mod.WordsOfPower,
            RecordType.Worldspace => mod.Worldspaces,
            _ => throw new ArgumentException($"Record type {type} is not recognized or not supported.", nameof(type))
        };

        public static Type GetGroupType(this RecordType type) => type switch
        {
            RecordType.AcousticSpace => typeof(IAcousticSpaceGetter),
            RecordType.Action => typeof(IActionRecordGetter),
            RecordType.Activator => typeof(IActivatorGetter),
            RecordType.ActorValueInformation => typeof(IActorValueInformationGetter),
            RecordType.AddonNode => typeof(IAddonNodeGetter),
            RecordType.AlchemicalApparatus => typeof(IAlchemicalApparatusGetter),
            RecordType.Ammunition => typeof(IAmmunitionGetter),
            RecordType.AnimatedObject => typeof(IAnimatedObjectGetter),
            RecordType.Armor => typeof(IArmorGetter),
            RecordType.ArmorAddon => typeof(IArmorAddonGetter),
            RecordType.ArtObject => typeof(IArtObjectGetter),
            RecordType.AssociationType => typeof(IAssociationTypeGetter),
            RecordType.BodyPartData => typeof(IBodyPartDataGetter),
            RecordType.Book => typeof(IBookGetter),
            RecordType.CameraPath => typeof(ICameraPathGetter),
            RecordType.CameraShot => typeof(ICameraShotGetter),
            RecordType.Cell => typeof(ICellGetter),
            RecordType.Climate => typeof(IClimateGetter),
            RecordType.CollisionLayer => typeof(ICollisionLayerGetter),
            RecordType.Color => typeof(IColorRecordGetter),
            RecordType.CombatStyle => typeof(ICombatStyleGetter),
            RecordType.ConstructibleObject => typeof(IConstructibleObjectGetter),
            RecordType.Container => typeof(IContainerGetter),
            RecordType.Debris => typeof(IDebrisGetter),
            RecordType.DefaultObjectManager => typeof(IDefaultObjectManagerGetter),
            RecordType.DialogBranch => typeof(IDialogBranchGetter),
            RecordType.DialogTopic => typeof(IDialogTopicGetter),
            RecordType.DialogView => typeof(IDialogViewGetter),
            RecordType.Door => typeof(IDoorGetter),
            RecordType.DualCastData => typeof(IDualCastDataGetter),
            RecordType.EffectShader => typeof(IEffectShaderGetter),
            RecordType.EncounterZone => typeof(IEncounterZoneGetter),
            RecordType.EquipType => typeof(IEquipTypeGetter),
            RecordType.Explosion => typeof(IExplosionGetter),
            RecordType.Eyes => typeof(IEyesGetter),
            RecordType.Faction => typeof(IFactionGetter),
            RecordType.Flora => typeof(IFloraGetter),
            RecordType.Footstep => typeof(IFootstepGetter),
            RecordType.FootstepSet => typeof(IFootstepSetGetter),
            RecordType.FormIdList => typeof(IFormListGetter),
            RecordType.Furniture => typeof(IFurnitureGetter),
            RecordType.GameSetting => typeof(IGameSettingGetter),
            RecordType.Global => typeof(IGlobalGetter),
            RecordType.Grass => typeof(IGrassGetter),
            RecordType.Hazard => typeof(IHazardGetter),
            RecordType.HeadPart => typeof(IHeadPartGetter),
            RecordType.IdleAnimation => typeof(IIdleAnimationGetter),
            RecordType.IdleMarker => typeof(IIdleMarkerGetter),
            RecordType.ImageSpace => typeof(IImageSpaceGetter),
            RecordType.ImageSpaceAdapter => typeof(IImageSpaceAdapterGetter),
            RecordType.Impact => typeof(IImpactGetter),
            RecordType.ImpactDataSet => typeof(IImpactDataSetGetter),
            RecordType.Ingestible => typeof(IIngestibleGetter),
            RecordType.Ingredient => typeof(IIngredientGetter),
            RecordType.Key => typeof(IKeyGetter),
            RecordType.Keyword => typeof(IKeywordGetter),
            RecordType.LandscapeTexture => typeof(ILandscapeTextureGetter),
            RecordType.LeveledItem => typeof(ILeveledItemGetter),
            RecordType.LeveledNpc => typeof(ILeveledNpcGetter),
            RecordType.LeveledSpell => typeof(ILeveledSpellGetter),
            RecordType.Light => typeof(ILightGetter),
            RecordType.LightingTemplate => typeof(ILightingTemplateGetter),
            RecordType.LoadScreen => typeof(ILoadScreenGetter),
            RecordType.Location => typeof(ILocationGetter),
            RecordType.LocationReferenceType => typeof(ILocationReferenceTypeGetter),
            RecordType.MagicEffect => typeof(IMagicEffectGetter),
            RecordType.MaterialObject => typeof(IMaterialObjectGetter),
            RecordType.MaterialType => typeof(IMaterialTypeGetter),
            RecordType.Message => typeof(IMessageGetter),
            RecordType.MiscItem => typeof(IMiscItemGetter),
            RecordType.MoveableStatic => typeof(IMoveableStaticGetter),
            RecordType.MovementType => typeof(IMovementTypeGetter),
            RecordType.MusicTrack => typeof(IMusicTrackGetter),
            RecordType.MusicType => typeof(IMusicTypeGetter),
            RecordType.NavigationMeshInfoMap => typeof(INavigationMeshInfoMapGetter),
            RecordType.Npc => typeof(INpcGetter),
            RecordType.ObjectEffect => typeof(IObjectEffectGetter),
            RecordType.Outfit => typeof(IOutfitGetter),
            RecordType.Package => typeof(IPackageGetter),
            RecordType.Perk => typeof(IPerkGetter),
            RecordType.Projectile => typeof(IProjectileGetter),
            RecordType.Quest => typeof(IQuestGetter),
            RecordType.Race => typeof(IRaceGetter),
            RecordType.Region => typeof(IRegionGetter),
            RecordType.Relationship => typeof(IRelationshipGetter),
            RecordType.ReverbParameters => typeof(IReverbParametersGetter),
            RecordType.Scene => typeof(ISceneGetter),
            RecordType.Scroll => typeof(IScrollGetter),
            RecordType.ShaderParticleGeometry => typeof(IShaderParticleGeometryGetter),
            RecordType.Shout => typeof(IShoutGetter),
            RecordType.SoulGem => typeof(ISoulGemGetter),
            RecordType.SoundCategory => typeof(ISoundCategoryGetter),
            RecordType.SoundDescriptor => typeof(ISoundDescriptorGetter),
            RecordType.SoundMarker => typeof(ISoundMarkerGetter),
            RecordType.SoundOutputModel => typeof(ISoundOutputModelGetter),
            RecordType.Spell => typeof(ISpellGetter),
            RecordType.Static => typeof(IStaticGetter),
            RecordType.StoryManageBranchNode => typeof(IStoryManagerBranchNodeGetter),
            RecordType.StoryManagerEventNode => typeof(IStoryManagerEventNodeGetter),
            RecordType.StoryManagerQuestNode => typeof(IStoryManagerQuestNodeGetter),
            RecordType.TalkingActivator => typeof(ITalkingActivatorGetter),
            RecordType.TextureSet => typeof(ITextureSetGetter),
            RecordType.Tree => typeof(ITreeGetter),
            RecordType.VisualEffect => typeof(IVisualEffectGetter),
            RecordType.VoiceType => typeof(IVoiceTypeGetter),
            RecordType.Water => typeof(IWaterGetter),
            RecordType.Weapon => typeof(IWeaponGetter),
            RecordType.Weather => typeof(IWeatherGetter),
            RecordType.WordOfPower => typeof(IWordOfPowerGetter),
            RecordType.Worldspace => typeof(IWorldspaceGetter),
            _ => throw new ArgumentException($"Record type {type} is not recognized or not supported.", nameof(type))
        };
    }
}